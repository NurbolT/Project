// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Data;

namespace Project.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20191121135852_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099");

            modelBuilder.Entity("Project.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryDescription")
                        .HasMaxLength(100);

                    b.Property<string>("CategoryName")
                        .IsRequired();

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Project.Models.Classroom", b =>
                {
                    b.Property<int>("SectionId");

                    b.Property<string>("ClassNumber")
                        .IsRequired();

                    b.HasKey("SectionId");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("Project.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("CourseName")
                        .IsRequired();

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Project.Models.CourseGroup", b =>
                {
                    b.Property<int>("CourseId");

                    b.Property<int>("GroupId");

                    b.HasKey("CourseId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("CourseGroups");
                });

            modelBuilder.Entity("Project.Models.Director", b =>
                {
                    b.Property<int>("SectionId");

                    b.Property<string>("DirectorEmail")
                        .IsRequired();

                    b.Property<string>("DirectorName")
                        .IsRequired();

                    b.Property<string>("DirectorSurname")
                        .IsRequired();

                    b.HasKey("SectionId");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("Project.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GroupNumber")
                        .IsRequired();

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Project.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<string>("SectionName")
                        .IsRequired();

                    b.Property<int>("TeacherId");

                    b.HasKey("SectionId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Project.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("SectionId");

                    b.Property<int>("StudentAge");

                    b.Property<string>("StudentEmail")
                        .IsRequired();

                    b.Property<string>("StudentName")
                        .IsRequired();

                    b.Property<string>("StudentSurname")
                        .IsRequired();

                    b.Property<string>("StudentTelephone")
                        .IsRequired();

                    b.HasKey("StudentId");

                    b.HasIndex("SectionId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Project.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TeacherEmail")
                        .IsRequired();

                    b.Property<string>("TeacherName")
                        .IsRequired();

                    b.Property<string>("TeacherPhone")
                        .IsRequired();

                    b.Property<string>("TeacherSurname")
                        .IsRequired();

                    b.HasKey("TeacherId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Project.Models.Classroom", b =>
                {
                    b.HasOne("Project.Models.Section", "Section")
                        .WithOne("Classroom")
                        .HasForeignKey("Project.Models.Classroom", "SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project.Models.CourseGroup", b =>
                {
                    b.HasOne("Project.Models.Course", "Course")
                        .WithMany("Groups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Project.Models.Group", "Group")
                        .WithMany("Courses")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project.Models.Director", b =>
                {
                    b.HasOne("Project.Models.Section", "Section")
                        .WithOne("Director")
                        .HasForeignKey("Project.Models.Director", "SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project.Models.Section", b =>
                {
                    b.HasOne("Project.Models.Category", "Category")
                        .WithMany("Sections")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Project.Models.Teacher", "Teacher")
                        .WithMany("Sections")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project.Models.Student", b =>
                {
                    b.HasOne("Project.Models.Section", "Section")
                        .WithMany("Students")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
